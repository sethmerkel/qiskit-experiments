---
features_expdata:
  - |
    :class:`.ExperimentData` has been upgraded to store analysis result data in 
    a table format with the new inline container :class:`.AnalysisResultTable`. 
    In this release, the :meth:`.ExperimentData.analysis_results` method still returns 
    a conventional list of :class:`.AnalysisResult` for backward compatibility, 
    however, when you call the method with new argument ``dataframe=True`` it returns
    analysis results all in one piece with the table format. For example,
    
    .. code-block:: python
    
      exp = StandardRB((0,), lengths, backend)
      experiment_data = exp.run().block_for_results()
      
      experiment_data.analysis_results(dataframe=True, columns="default")
    
    Information contained in the returned table can be filtered with ``columns`` argument,
    which may take either ``all``, ``default``, ``minimal``, or list of column names.
    Returning a list of :class:`.AnalysisResult` will be deprecated in a future release
    along with the ``dataframe`` option.
    
    Related to this update, :meth:`.ExperimentData.add_analysis_results` method now takes
    keyword arguments keyed on the table column names, in addition to the argument of
    ``results`` which is either :class:`.AnalysisResult` or a list of it.
    This allows users and developers to bypass creation of :class:`.AnalysisResult` instance
    for registering new entry in the :class:`.ExperimentData` instance.
    
    Note that the conventional :class:`.AnalysisResult` is originally a payload object for 
    saving an analysis result in a remote database, as it implements a REST API 
    for the IBM Experiment Service, which is not necessary at all in 
    the context of experiment data analysis.
    In a future release, :class:`.AnalysisResult` will be hidden from Qiskit Experiments users.
